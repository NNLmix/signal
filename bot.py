import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import openai

from config import TELEGRAM_TOKEN, OPENAI_API_KEY
from storage import get_signal, save_ai_evaluation

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)
openai.api_key = OPENAI_API_KEY

async def ask_ai_about_signal(signal: dict) -> dict:
    prompt = f"""
–û—Ü–µ–Ω–∏ —Å–¥–µ–ª–∫—É:
–°–∏–º–≤–æ–ª: {signal['symbol']}
–°—Ç–æ—Ä–æ–Ω–∞: {signal['side']}
–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {signal['entry_price']}
–†–∞–∑–º–µ—Ä: {signal['size']}
–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {signal['confidence']}
–ü—Ä–∏—á–∏–Ω–∞: {signal['reason']}
"""
    response = openai.ChatCompletion.create(
        model="gpt-5",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.2,
    )
    answer = response["choices"][0]["message"]["content"]
    score = None
    if "%" in answer:
        try:
            score = float([s for s in answer.split() if "%" in s][0].replace("%", ""))
        except:
            score = None
    return {"prompt": prompt, "answer": answer, "score": score, "verdict": "—É–¥–∞—á–Ω–æ" if "–¥–∞" in answer.lower() else "—Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ"}

@dp.message_handler(commands=["ai"])
async def ai_handler(message: types.Message):
    args = message.get_args().strip()
    if not args.isdigit():
        await message.reply("–£–∫–∞–∂–∏ ID —Å–∏–≥–Ω–∞–ª–∞: /ai <signal_id>")
        return

    signal_id = int(args)
    signal = await get_signal(signal_id)
    if not signal:
        await message.reply(f"–°–∏–≥–Ω–∞–ª {signal_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await message.reply("‚è≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é AI-–æ—Ü–µ–Ω–∫—É...")
    result = await ask_ai_about_signal(signal)

    await save_ai_evaluation(
        signal_id=signal_id,
        prompt=result["prompt"],
        model="gpt-5",
        response_text=result["answer"],
        verdict=result["verdict"],
        score=result["score"] or 0,
    )
    await message.reply(f"ü§ñ AI-–æ—Ü–µ–Ω–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ {signal_id}:\n\n{result['answer']}")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
